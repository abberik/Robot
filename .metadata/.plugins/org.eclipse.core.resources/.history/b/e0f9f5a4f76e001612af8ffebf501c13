package client;
import java.awt.BorderLayout;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JToolBar;

import handelser.Anslut;
import handelser.OppnaKonsol;
import handelser.OppnaKontroller;
import natverkssaker.Anslutning;

public class Klient extends JFrame{

	public static void main(String[] args) {
		
		try {
			
			BufferedWriter bw = new BufferedWriter(new FileWriter("res/file.txt"));
			
			bw.write("hello");
			
			bw.close();
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		//new Klient();
	}
	
	private JToolBar toolbar;
	private JMenu open_menu;
	private JMenuBar menu_bar;
	private JMenu client_menu;
	
	OppnaKonsol oppna_konsol;
	OppnaKontroller oppna_kontroller;
	
	private JMenuItem open_console_menu_item; 
	private JMenuItem open_controls_menu_item;

	private Anslutning anslutning;
	private Anslut anslut;
	private JMenuItem anslut_menu_item;
	
	public Klient() {
		
		oppna_konsol = new OppnaKonsol();
		oppna_kontroller = new OppnaKontroller();
		
		this.setSize(640,480);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setLocationRelativeTo(null);
		this.setLayout(new BorderLayout());
		
		this.toolbar = new JToolBar();
		this.open_menu = new JMenu("Open");
		this.client_menu = new JMenu("Client");
		this.open_menu.setEnabled(true);
		this.open_menu.setVisible(true);
		this.menu_bar = new JMenuBar();
		
		anslut = new Anslut(this);
		anslut_menu_item = new JMenuItem("Connect to pi.");
		anslut_menu_item.addActionListener(anslut);
		anslut_menu_item.setMnemonic('c');
		open_console_menu_item = new JMenuItem("Open developer console.");
		open_console_menu_item.addActionListener(oppna_konsol);
		open_console_menu_item.setMnemonic('s');
		open_controls_menu_item = new JMenuItem("Open controls");
		open_controls_menu_item.addActionListener(oppna_kontroller);
		open_controls_menu_item.setMnemonic('t');
		
		open_menu.add(open_console_menu_item);
		open_menu.add(open_controls_menu_item);
		open_menu.setMnemonic('o');
		
		menu_bar.add(open_menu);
		
		client_menu.setMnemonic('c');
		client_menu.add(anslut_menu_item);
		
		menu_bar.add(client_menu);
		this.add(menu_bar,BorderLayout.NORTH);

		
		this.setVisible(true);
		
	}

	public JToolBar getToolbar() {
		return toolbar;
	}

	public void setToolbar(JToolBar toolbar) {
		this.toolbar = toolbar;
	}

	public JMenu getOpen_menu() {
		return open_menu;
	}

	public void setOpen_menu(JMenu open_menu) {
		this.open_menu = open_menu;
	}

	public JMenuBar getMenu_bar() {
		return menu_bar;
	}

	public void setMenu_bar(JMenuBar menu_bar) {
		this.menu_bar = menu_bar;
	}

	public JMenu getClient_menu() {
		return client_menu;
	}

	public void setClient_menu(JMenu client_menu) {
		this.client_menu = client_menu;
	}

	public OppnaKonsol getOppna_konsol() {
		return oppna_konsol;
	}

	public void setOppna_konsol(OppnaKonsol oppna_konsol) {
		this.oppna_konsol = oppna_konsol;
	}

	public OppnaKontroller getOppna_kontroller() {
		return oppna_kontroller;
	}

	public void setOppna_kontroller(OppnaKontroller oppna_kontroller) {
		this.oppna_kontroller = oppna_kontroller;
	}

	public JMenuItem getOpen_console_menu_item() {
		return open_console_menu_item;
	}

	public void setOpen_console_menu_item(JMenuItem open_console_menu_item) {
		this.open_console_menu_item = open_console_menu_item;
	}

	public JMenuItem getOpen_controls_menu_item() {
		return open_controls_menu_item;
	}

	public void setOpen_controls_menu_item(JMenuItem open_controls_menu_item) {
		this.open_controls_menu_item = open_controls_menu_item;
	}

	public Anslutning getAnslutning() {
		return anslutning;
	}

	public void setAnslutning(Anslutning anslutning) {
		this.anslutning = anslutning;
	}
	
	
	
}
